{"version":3,"sources":["crossword.js","Board.jsx","CluesList.jsx","Gamebar.jsx","App.js","reportWebVitals.js","index.js"],"names":["clueParsing","clues","index","width","height","entry","$","row","parseInt","n","col","Crossword","data","reference","guesses","clueMap","cursorX","cursorY","direction","cluesDown","cluesAcross","corrects","total","crossword","this","Width","v","Height","parsedAcross","Object","keys","across","map","a","parsedDown","down","forEach","clue","cn","i","j","push","length","c","isStart","r","x","y","inner","newX","newY","setCursor","_movement","right","left","up","isComplete","inc","currClue","currentClue","indices","currClueIndex","findIndex","nextClue","completion","_isWordCompleted","_nextWord","char","shiftKey","toUpperCase","isAlpha","test","changeDirection","prevWord","nextWord","_updateGuess","prev","currRange","currentWordRange","currCharPos","step","mapping","split","_","BoardContext","createContext","onCellClick","lastGuessed","Cell","content","className","displayContent","useContext","onClick","useCallback","filter","indicator","Row","refRow","cell","Board","game","useState","setCursorX","setCursorY","setCurrRange","setDirection","setLastGuessed","GameContext","onCellChanged","onOver","setBoardCursor","onKeydown","event","keypress","key","isOver","preventDefault","useEffect","document","addEventListener","removeEventListener","Provider","value","clueKey","CluesList","highlighted","currCn","setCurrCn","cluesMap","id","currentClueIndices","refs","reduce","acc","createRef","scrollToClue","current","scrollIntoView","behavior","block","retval","clueToScrollTo","ref","string","match","m","replaceAll","decodeURIComponent","Gamebar","secs","setSecs","onPlayPause","isPlaying","togglePlay","timer","setInterval","s","clearInterval","style","marginRight","toString","padStart","b","App","setCrossword","setCurrentClueIndices","setIsPlaying","setIsOver","Date","toLocaleDateString","month","date","year","slice","fetch","origin","then","res","text","xml2js","parseStringPromise","obj","window","curr","currentClueMapping","highlightDirection","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9d88eef1.chunk.js","sourcesContent":["function clueParsing(clues, index, width, height) {\n  const entry = clues[index][0].$;\n  const row = ((parseInt(entry.n) - 1) / width) >> 0;\n  const col = (parseInt(entry.n) - 1) % width;\n  entry.row = row;\n  entry.col = col;\n  return entry;\n}\nclass Crossword {\n  reference = [];\n  guesses = [];\n  clueMap = [];\n  width = 0;\n  height = 0;\n  cursorX = 0;\n  cursorY = 0;\n  direction = 0; // 0 for horizontal, 1 for vert\n  cluesDown = {};\n  cluesAcross = {};\n  corrects = 0;\n  total = 0;\n  constructor(data) {\n    data = data.crossword;\n    this.width = parseInt(data.Width[0].$.v || 0);\n    this.height = parseInt(data.Height[0].$.v || 0);\n\n    const parsedAcross = Object.keys(data.across[0]).map((a) =>\n      clueParsing(data.across[0], a, this.width, this.height)\n    );\n    const parsedDown = Object.keys(data.down[0]).map((a) =>\n      clueParsing(data.down[0], a, this.width, this.height)\n    );\n    parsedDown.forEach((clue) => {\n      this.cluesDown[clue.cn] = clue;\n    });\n    parsedAcross.forEach((clue) => {\n      this.cluesAcross[clue.cn] = clue;\n    });\n    for (let i = 0; i < this.height; i++) {\n      const row = [];\n      for (let j = 0; j < this.width; j++) {\n        row.push(null);\n      }\n      this.guesses.push([...row]);\n      this.reference.push([...row]);\n      this.clueMap.push([...row]);\n    }\n\n    for (let i = 0; i < parsedAcross.length; i++) {\n      const entry = parsedAcross[i];\n      const { row, col } = entry;\n      for (let c = 0; c < entry.a.length; c++) {\n        this.reference[row][col + c] = entry.a[c];\n        this.clueMap[row][col + c] = {\n          across: {\n            index: entry.cn,\n            isStart: c === 0,\n          },\n        };\n        this.guesses[row][col + c] = \"\";\n        this.total++;\n      }\n    }\n    parsedDown.forEach((entry) => {\n      for (let r = 0; r < entry.a.length; r++) {\n        this.clueMap[entry.row + r][entry.col].down = {\n          index: entry.cn,\n          isStart: r === 0,\n        };\n      }\n    });\n  }\n\n  setCursor(x, y) {\n    if (x < this.width && x >= 0 && y < this.height && y >= 0) {\n      this.cursorX = x;\n      this.cursorY = y;\n    }\n    return {\n      x: this.cursorX,\n      y: this.cursorY,\n    };\n  }\n\n  _movement(inner) {\n    let newX = this.cursorX;\n    let newY = this.cursorY;\n    do {\n      const { x, y } = inner(newX, newY);\n      newX = x;\n      newY = y;\n    } while (\n      newX < this.width &&\n      newY < this.height &&\n      newX >= 0 &&\n      newY >= 0 &&\n      this.reference[newY][newX] === null\n    );\n    return this.setCursor(newX, newY);\n  }\n\n  right() {\n    return this._movement((x, y) => ({ x: x + 1, y }));\n  }\n  down() {\n    return this._movement((x, y) => ({ x, y: y + 1 }));\n  }\n  up() {\n    return this._movement((x, y) => ({ x, y: y - 1 }));\n  }\n  left() {\n    return this._movement((x, y) => ({ x: x - 1, y }));\n  }\n\n  step() {\n    if (this.direction === 0) {\n      return this.right();\n    } else if (this.direction === 1) {\n      return this.down();\n    }\n  }\n  prev() {\n    if (this.direction === 0) {\n      return this.left();\n    } else if (this.direction === 1) {\n      return this.up();\n    }\n  }\n\n  _isWordCompleted(clue, direction) {\n    for (let i = 0; i < clue.a.length; i++) {\n      const y = clue.row + (direction === 1 ? i : 0);\n      const x = clue.col + (direction === 0 ? i : 0);\n      if (this.guesses[y][x] !== this.reference[y][x]) {\n        return {\n          isComplete: false,\n          x,\n          y,\n        };\n      }\n    }\n    return {\n      isComplete: true,\n    };\n  }\n\n  // goes to the the next word with empty slot\n  _nextWord(inc = 1) {\n    const currClue = this.currentClue();\n    const clues = this.direction === 0 ? this.cluesAcross : this.cluesDown;\n    const indices = Object.keys(clues);\n    let currClueIndex = indices.findIndex((cn) => cn === currClue.cn);\n    while (currClueIndex + inc < indices.length && currClueIndex + inc >= 0) {\n      const nextClue = clues[indices[currClueIndex + inc]];\n      const completion = this._isWordCompleted(nextClue, this.direction);\n      if (completion.isComplete) {\n        currClueIndex += inc;\n      } else {\n        return this.setCursor(completion.x, completion.y);\n      }\n    }\n    const nextClue = clues[indices[currClueIndex]];\n    return this.setCursor(nextClue.col, nextClue.row);\n  }\n  nextWord() {\n    return this._nextWord(1);\n  }\n  prevWord() {\n    return this._nextWord(-1);\n  }\n  changeDirection() {\n    this.direction = (this.direction + 1) % 2;\n  }\n  _updateGuess(char) {\n    if (\n      this.guesses[this.cursorY][this.cursorX] ===\n      this.reference[this.cursorY][this.cursorX]\n    ) {\n      this.corrects--;\n    }\n    this.guesses[this.cursorY][this.cursorX] = char;\n    if (\n      this.guesses[this.cursorY][this.cursorX] ===\n      this.reference[this.cursorY][this.cursorX]\n    ) {\n      this.corrects++;\n    }\n  }\n  keypress(char, shiftKey) {\n    char = char.toUpperCase();\n    const isAlpha = /[A-Z]/.test(char);\n\n    if (char === \"ARROWRIGHT\") {\n      this.right();\n    } else if (char === \"ARROWDOWN\") {\n      this.down();\n    } else if (char === \"ARROWLEFT\") {\n      this.left();\n    } else if (char === \"ARROWUP\") {\n      this.up();\n    } else if (char === \"ENTER\") {\n      this.changeDirection();\n    } else if (char === \"TAB\") {\n      if (shiftKey) {\n        this.prevWord();\n      } else {\n        this.nextWord();\n      }\n    } else if (char === \"BACKSPACE\") {\n      // erased a correct guess\n      this._updateGuess(\" \");\n      this.prev();\n    } else if (isAlpha && char.length === 1) {\n      this._updateGuess(char);\n      if (char === this.reference[this.cursorY][this.cursorX]) {\n        const currRange = this.currentWordRange();\n        const currCharPos = currRange[currRange.length - 1];\n        const isEnd =\n          currCharPos[0] === this.cursorX && currCharPos[1] === this.cursorY;\n        if (isEnd) {\n          this.nextWord();\n        } else {\n          this.step();\n        }\n      }\n    } else if (char === \" \") {\n      this.changeDirection();\n    }\n    return {\n      x: this.cursorX,\n      y: this.cursorY,\n    };\n  }\n\n  currentClue() {\n    const x = this.cursorX;\n    const y = this.cursorY;\n    let clue = null;\n    const mapping = this.clueMap[y][x];\n    if (this.direction === 0) {\n      clue = this.cluesAcross[mapping.across.index];\n    } else if (this.direction === 1) {\n      clue = this.cluesDown[mapping.down.index];\n    }\n    return clue;\n  }\n\n  currentWordRange() {\n    const clue = this.currentClue();\n    if (this.direction === 0) {\n      return clue.a.split(\"\").map((_, i) => [clue.col + i, clue.row]);\n    } else if (this.direction === 1) {\n      return clue.a.split(\"\").map((_, i) => [clue.col, clue.row + i]);\n    }\n  }\n\n  currentClueMapping() {\n    const x = this.cursorX;\n    const y = this.cursorY;\n    const mapping = this.clueMap[y][x];\n    return mapping;\n  }\n\n  isOver() {\n    return this.total === this.corrects;\n  }\n}\n\nexport default Crossword;\n","import React, {\n  useState,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n} from \"react\";\n\nimport { GameContext } from \"./App\";\n\nconst BoardContext = createContext({\n  cursorX: 0,\n  cursorY: 0,\n  currRange: [],\n  direction: 0,\n  onCellClick: (x, y) => {},\n  lastGuessed: \"\",\n  clueMap: {},\n});\n\nconst Cell = ({ content, reference, x, y }) => {\n  let className = \"cell\";\n  let displayContent = content;\n  const { onCellClick, cursorX, cursorY, clueMap, currRange } = useContext(\n    BoardContext\n  );\n  const onClick = useCallback(() => {\n    if (content !== null) {\n      onCellClick(x, y);\n    }\n  }, [onCellClick, x, y, content]);\n\n  if (content === null) {\n    className += \" blank\";\n    displayContent = \"\\xa0\";\n  }\n\n  if (x === cursorX && y === cursorY) {\n    className += \" selected\";\n  }\n\n  if (content !== \"\" && content !== null && content !== reference) {\n    className += \" incorrect\";\n  }\n\n  if (currRange.filter((r) => r[0] === x && r[1] === y).length > 0) {\n    className += \" in-range\";\n  }\n\n  let indicator = null;\n  if (clueMap[y][x] && clueMap[y][x].across.isStart) {\n    indicator = <span className=\"indicator\">{clueMap[y][x].across.index}</span>;\n  } else if (clueMap[y][x] && clueMap[y][x].down.isStart) {\n    indicator = <span className=\"indicator\">{clueMap[y][x].down.index}</span>;\n  }\n\n  return (\n    <span className={className} onClick={onClick}>\n      {indicator}\n      {displayContent}\n    </span>\n  );\n};\n\nconst Row = ({ row, refRow, y }) => {\n  return (\n    <div>\n      {row.map((cell, c) => (\n        <Cell\n          key={`${row}:${c}`}\n          content={cell}\n          reference={refRow[c]}\n          x={c}\n          y={y}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst Board = ({ game }) => {\n  const [cursorX, setCursorX] = useState(0);\n  const [cursorY, setCursorY] = useState(0);\n  const [currRange, setCurrRange] = useState([]);\n  const [direction, setDirection] = useState(0);\n  const [lastGuessed, setLastGuessed] = useState(null);\n  const { onCellChanged, onOver } = useContext(GameContext);\n  const setBoardCursor = useCallback(\n    (game) => {\n      setCursorX(game.cursorX);\n      setCursorY(game.cursorY);\n      setCurrRange(game.currentWordRange());\n      setDirection(game.direction);\n      onCellChanged();\n    },\n    [onCellChanged]\n  );\n  const onCellClick = useCallback(\n    (newX, newY) => {\n      if (game.cursorX === newX && game.cursorY === newY) {\n        game.changeDirection();\n      }\n      game.setCursor(newX, newY);\n      setBoardCursor(game);\n    },\n    [game, setBoardCursor]\n  );\n  const onKeydown = useCallback(\n    (event) => {\n      game.keypress(event.key, event.shiftKey);\n      setLastGuessed(`${game.cursorX}:${game.cursorY}:${event.key}`);\n      setBoardCursor(game);\n      if (game.isOver()) {\n        onOver();\n      }\n      event.preventDefault();\n      return false;\n    },\n    [game, setBoardCursor, onOver]\n  );\n  useEffect(() => {\n    setBoardCursor(game);\n  }, [game, setBoardCursor]);\n  useEffect(() => {\n    document.addEventListener(\"keydown\", onKeydown);\n    return () => {\n      document.removeEventListener(\"keydown\", onKeydown);\n    };\n  }, [onKeydown]);\n  return (\n    <div className=\"board\">\n      <BoardContext.Provider\n        value={{\n          cursorX,\n          cursorY,\n          currRange,\n          direction,\n          onCellClick,\n          lastGuessed,\n          clueMap: game.clueMap,\n        }}\n      >\n        {game.guesses.map((row, r) => {\n          return <Row row={row} refRow={game.reference[r]} key={r} y={r} />;\n        })}\n      </BoardContext.Provider>\n    </div>\n  );\n};\n\nexport default Board;\n","import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n  createRef,\n} from \"react\";\nimport { GameContext } from \"./App\";\n\nfunction clueKey(cn, direction) {\n  return `clue-${direction}-${cn}`;\n}\n\nfunction decode(string) {\n  const matches = string.match(/%[0-9][0-9]/g) || [];\n  matches.forEach((m) => {\n    string = string.replaceAll(m, decodeURIComponent(m));\n  });\n  return string;\n}\n\nconst CluesList = ({ game, direction, highlighted }) => {\n  const [currCn, setCurrCn] = useState(0);\n\n  const cluesMap = direction === 0 ? game.cluesAcross : game.cluesDown;\n  const clues = Object.keys(cluesMap).map((id) => cluesMap[id]);\n  const { currentClueIndices } = useContext(GameContext);\n\n  const refs = clues.reduce((acc, clue) => {\n    acc[clueKey(clue.cn, direction)] = createRef();\n    return acc;\n  }, {});\n\n  const scrollToClue = useCallback(\n    (id) => {\n      if (!refs[id]) {\n        return;\n      }\n\n      refs[id].current.scrollIntoView({\n        behavior: \"auto\",\n        block: \"center\",\n      });\n    },\n    [refs]\n  );\n\n  useEffect(() => {\n    let retval = \"\";\n    if (direction === 0) {\n      retval = currentClueIndices.across;\n    } else {\n      retval = currentClueIndices.down;\n    }\n    setCurrCn(retval);\n    const clueToScrollTo = clueKey(retval, direction);\n    scrollToClue(clueToScrollTo);\n  }, [currentClueIndices, direction, scrollToClue]);\n\n  const className = useCallback(\n    (clue) => {\n      if (clue.cn === currCn) {\n        return highlighted ? \"selected highlighted\" : \"selected\";\n      }\n      return null;\n    },\n    [currCn, highlighted]\n  );\n\n  return (\n    <div>\n      <h2>{direction === 0 ? \"Across\" : \"Down\"}</h2>\n      <div className=\"clue-list\" key={`clues-list-${direction}`}>\n        {clues.map((clue) => (\n          <div\n            key={clueKey(clue.cn, direction)}\n            ref={refs[clueKey(clue.cn, direction)]}\n            className={className(clue, highlighted)}\n          >\n            <span>{clue.cn}.&nbsp;</span>\n            {decode(clue.c)}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default CluesList;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport { GameContext } from \"./App\";\n\nconst Gamebar = () => {\n  const [secs, setSecs] = useState(0);\n  const { onPlayPause, isPlaying } = useContext(GameContext);\n  const togglePlay = () => {\n    onPlayPause(!isPlaying);\n  };\n\n  useEffect(() => {\n    if (!isPlaying) {\n      return;\n    }\n    const timer = setInterval(() => {\n      setSecs((s) => s + 1);\n    }, 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, [isPlaying]);\n  return (\n    <div className=\"gamebar\">\n      {!isPlaying && (\n        <span onClick={togglePlay} className=\"button item\">\n          <i className=\"fa fa-play\" style={{ marginRight: 5 }}></i>\n          Resume\n        </span>\n      )}\n      {isPlaying && (\n        <span onClick={togglePlay} className=\"button item\">\n          <i className=\"fa fa-pause\" style={{ marginRight: 5 }}></i>\n          Pause\n        </span>\n      )}\n      <span className=\"item\">\n        {((secs / 60) >> 0).toString().padStart(2, \"0\")}:\n        {(secs % 60).toString().padStart(2, \"0\")}\n      </span>\n    </div>\n  );\n};\n\nexport default Gamebar;\n","import \"./App.css\";\nimport React, { useEffect, useState, createContext, useCallback } from \"react\";\nimport xml2js from \"xml2js\";\n\nimport Crossword from \"./crossword\";\nimport Board from \"./Board\";\nimport CluesList from \"./CluesList\";\nimport Gamebar from \"./Gamebar\";\n\nconst corsAnywhere = \"https://cors-anywhere.herokuapp.com/\";\n\nexport const GameContext = createContext({\n  currentClueIndices: {},\n  isPlaying: true,\n  onCellChanged: () => {},\n  onPlayPause: (b) => {},\n  onOver: () => {},\n});\n\nfunction App() {\n  const [crossword, setCrossword] = useState();\n  const [currentClueIndices, setCurrentClueIndices] = useState({});\n  const [isPlaying, setIsPlaying] = useState(true);\n  const [isOver, setIsOver] = useState(false);\n  useEffect(() => {\n    let [month, date, year] = new Date().toLocaleDateString(\"en-US\").split(\"/\");\n    month = month.padStart(2, \"0\");\n    date = date.padStart(2, \"0\");\n    year = year.slice(2, 4);\n    fetch(\n      `${corsAnywhere}http://picayune.uclick.com/comics/usaon/data/usaon${year}${month}${date}-data.xml`,\n      {\n        origin: \"http://example.com\",\n      }\n    )\n      .then((res) => res.text())\n      .then((text) => xml2js.parseStringPromise(text))\n      .then((obj) => {\n        const game = new Crossword(obj);\n        window.game = game;\n        setCrossword(game);\n      });\n  }, []);\n\n  const onCellChanged = useCallback(() => {\n    if (!crossword) {\n      return;\n    }\n    const curr = crossword.currentClueMapping();\n    setCurrentClueIndices({\n      across: curr.across.index,\n      down: curr.down.index,\n      highlightDirection: crossword.direction,\n    });\n  }, [crossword]);\n\n  const onPlayPause = (isPlaying) => {\n    setIsPlaying(isPlaying);\n  };\n\n  const onOver = () => {\n    onPlayPause(false);\n    setIsOver(true);\n  };\n\n  return (\n    <div className=\"App\">\n      {crossword && (\n        <div>\n          <GameContext.Provider\n            value={{\n              currentClueIndices,\n              isPlaying,\n              onCellChanged,\n              onPlayPause,\n              onOver,\n            }}\n          >\n            <Gamebar />\n            <div\n              className={`game-container ${isPlaying ? \"playing\" : \"paused\"}`}\n            >\n              <div className={`game-area`}>\n                <Board game={crossword} />\n                <div className=\"clues-area\">\n                  <CluesList\n                    direction={0}\n                    highlighted={currentClueIndices.highlightDirection === 0}\n                    game={crossword}\n                  />\n                  <CluesList\n                    direction={1}\n                    highlighted={currentClueIndices.highlightDirection === 1}\n                    game={crossword}\n                  />\n                </div>\n              </div>\n              <div className=\"veil\">{isOver && <div>Congrats!</div>}</div>\n            </div>\n          </GameContext.Provider>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}